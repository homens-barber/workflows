{
  "name": "Barbers Agent",
  "nodes": [
    {
      "parameters": {
        "model": "openai/gpt-4o",
        "options": {}
      },
      "id": "b3900ea1-dd13-4038-9fa7-554f491b7d93",
      "name": "OpenRouter Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        80,
        384
      ],
      "notesInFlow": true,
      "credentials": {
        "openRouterApi": {
          "id": "R7LaWQCbzgw5kv4b",
          "name": "OpenRouter account"
        }
      },
      "notes": "Configura tus credenciales de OpenRouter aquí. El agente usará este modelo."
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "twilio-whatsapp",
        "options": {}
      },
      "id": "eb43eb09-d35e-4708-a99c-cbbc271f0b8f",
      "name": "Webhook: Twilio Inbound",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -672,
        160
      ],
      "webhookId": "502cabf9-7c20-450c-936f-2a9dbbd36581",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.userMessage }}",
        "options": {
          "systemMessage": "Eres BarberAI, un asistente por WhatsApp que REGISTRA y ACTUALIZA el perfil del BARBERO.\nTrabajas SOLO con barberos (no clientes). Tu objetivo es completar, guardar o editar un registro en public.\"Professional\" de Supabase usando las herramientas disponibles y exponiendo valores para que n8n pueda leerlos.\n\n## Tools disponibles\n- get_professional(phoneNumber): devuelve los datos existentes de un barbero por su phoneNumber.\n- create_professional(data): crea un nuevo registro en la tabla Professional.\n- update_professional(data): actualiza campos específicos de un barbero existente identificado por su phoneNumber.\n\n## Columnas válidas (usa estos nombres EXACTOS)\n- phoneNumber (string) – NO LO PIDAS\n- name (string) **requerido**\n- address (string o null si “a domicilio”) **requerido**\n- gmail (string; debe terminar en @gmail.com) **requerido**\n- city (string) **requerido**\n- barbershopName (string)\n\nNO uses otros nombres de campo. NO inventes claves adicionales.\n\n## Reglas de mapeo y validación\n- Normaliza: elimina comillas extra, corrige espacios duplicados y usa mayúsculas/minúsculas coherentes (Title Case en nombres propios).\n- gmail DEBE terminar en **@gmail.com** (acepta puntos y “+” de Gmail). Si no cumple, pide corregirlo.\n- Si el usuario dice “a domicilio”, guarda \"address\": null (pero igual solicita **city**).\n- Nunca sobrescribas un campo válido con vacío. Solo confirma o corrige.\n- Expón y mantén actualizados estos valores para n8n: **name**, **address**, **gmail**, **city**, **barbershopName** (para que $fromAI los lea).\n- Si el usuario entrega varios datos en un solo mensaje, **extrae y valida todos**.\n- **NUNCA preguntes ni confirmes el `phoneNumber`**. Ya lo tienes del orquestador y debes usarlo directamente.\n- **Invocación de tools en n8n (REGLA DURA)**: `get_professional`, `create_professional` y `update_professional` se llaman SIEMPRE con **args vacíos `{}`**.\n  - ✅ Válido: `get_professional({})`, `update_professional({})`, `create_professional({})`\n  - ❌ Prohibido: pasar cualquier argumento o clave.\n\n## Protocolo de actualización (OBLIGATORIO)\n- Si el usuario pide cambiar **name, address, gmail, city o barbershopName**:\n  1) Valida y **expón** los campos (para `$fromAI`).\n  2) **Llama inmediatamente** `update_professional({})`.\n  3) **Solo después** de esa llamada, envía la confirmación al usuario.\n  4) Si la tool falla, **no confirmes**; responde: “Ups, tuve un problema guardando tu cambio. Dímelo así: ‘mi correo es tunuevo@gmail.com’ y lo intento de nuevo.”\n\n- Para “volver/restablecer al correo anterior”:\n  1) Llama `get_professional({})` para conocer el valor actual.\n  2) Si tienes en memoria un correo anterior distinto y válido `@gmail.com`, úsalo; de lo contrario, **pídele** el correo exacto.\n  3) Expón `gmail` y llama `update_professional({})`.\n  4) Luego confirma.\n\n## Estrategia de conversación (exclusivo Barberos)\n1) **Siempre** inicia con `get_professional({})` para saber si existe.\n   - **No existe → CREACIÓN**:\n     - **Presentación**: “¡Hola! Soy BarberAI, un sistema para que tus clientes te encuentren y agenden citas por WhatsApp. Te registro en pocos pasos.”\n     - Pide solo lo que falte: `name`, `barbershopName` (permite “Independiente”), `address` (o “a domicilio”), `city`, `gmail`.\n     - **Confirmación legible**:\n       \"Por confirmar:\n       • Nombre: …\n       • Barbería: …\n       • Dirección: …\n       • Ciudad: …\n       • Gmail: …\n       ¿Confirmas?\"\n     - Tras confirmar, llama a `create_professional({})`.\n   - **Existe → EDICIÓN**:\n     - Se pueden editar: `name`, `gmail`, `address`, `city`, `barbershopName`.\n     - Sigue el **Protocolo de actualización** (llamar tool antes de confirmar).\n\n2) **Estilo de respuesta**\n   - Español, 1–2 líneas, tono cordial.\n   - Pregunta solo lo necesario. Si un dato ya existe y es válido, confírmalo en una línea.\n\n## Ejemplos (debes imitarlos)\n- Cambiar Gmail a “barbero.demo+1@gmail.com”:\n  - Expón: `gmail = \"barbero.demo+1@gmail.com\"`\n  - Llama: `update_professional({})`\n  - Responde: “✅ Tu correo fue actualizado a barbero.demo+1@gmail.com”.\n\n- Restablecer al anterior (usuario dice “déjalo como antes”):\n  - Llama: `get_professional({})` (obtén actual)\n  - Pide el correo exacto si no lo tienes; si lo tienes, expón `gmail`\n  - Llama: `update_professional({})`\n  - Responde: “✅ Tu correo fue restablecido a …”.\n\n- **NO HACER**: Confirmar cambios sin llamar `update_professional({})`.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        288,
        160
      ],
      "id": "c4eca8d7-a091-464c-8bc1-d91258bd13a7",
      "name": "AI Agent",
      "retryOnFail": true
    },
    {
      "parameters": {
        "from": "={{ $('Edit Fields').item.json.homensPhone }}",
        "to": "={{ $('Edit Fields').item.json.userPhone }}",
        "toWhatsapp": true,
        "message": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        784,
        160
      ],
      "id": "282a521d-564a-49bd-8c59-7cc2ddd00b14",
      "name": "Send an SMS/MMS/WhatsApp message",
      "credentials": {
        "twilioApi": {
          "id": "mjrl6Ka3nNJuoaum",
          "name": "Twilio account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "Professional",
        "filters": {
          "conditions": [
            {
              "keyName": "phoneNumber",
              "keyValue": "={{ $json.userPhone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        384,
        416
      ],
      "id": "414118d1-d991-4117-a295-46961419d4e1",
      "name": "get_professional",
      "credentials": {
        "supabaseApi": {
          "id": "ujCg28xuhCRpQs12",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "Professional",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "phoneNumber",
              "fieldValue": "={{ $json.userPhone }}"
            },
            {
              "fieldId": "address",
              "fieldValue": "={{ $fromAI('address', '', 'string') }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $fromAI('name', '', 'string') }}"
            },
            {
              "fieldId": "gmail",
              "fieldValue": "={{ $fromAI('gmail', '', 'string') }}"
            },
            {
              "fieldId": "city",
              "fieldValue": "={{ $fromAI('city', '', 'string') }}"
            },
            {
              "fieldId": "barbershopName",
              "fieldValue": "={{ $fromAI('barbershopName', '', 'string') }}"
            }
          ]
        }
      },
      "id": "4de18402-dee6-4a70-a12b-0035a27f851a",
      "name": "create_professional",
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        448,
        592
      ],
      "notesInFlow": true,
      "credentials": {
        "supabaseApi": {
          "id": "ujCg28xuhCRpQs12",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Update a row in Supabase",
        "operation": "update",
        "tableId": "Professional",
        "filters": {
          "conditions": [
            {
              "keyName": "phoneNumber",
              "condition": "eq",
              "keyValue": "={{ $json.userPhone }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "name",
              "fieldValue": "={{ $fromAI('name', '', 'string') }}"
            },
            {
              "fieldId": "gmail",
              "fieldValue": "={{ $fromAI('gmail', '', 'string') }}"
            },
            {
              "fieldId": "address",
              "fieldValue": "={{ $fromAI('address', '', 'string') }}"
            },
            {
              "fieldId": "city",
              "fieldValue": "={{ $fromAI('city', '', 'string') }}"
            },
            {
              "fieldId": "barbershopName",
              "fieldValue": "={{ $fromAI('barbershopName', '', 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        528,
        736
      ],
      "id": "8d72639d-2239-46ea-8612-65ce1c966f63",
      "name": "update_professional",
      "credentials": {
        "supabaseApi": {
          "id": "ujCg28xuhCRpQs12",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.userPhone }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        240,
        400
      ],
      "id": "59111b1f-68dc-4d20-b60a-1401291e2021",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e9a6bcfa-7ff0-4ad3-ab42-f32720bd7114",
              "name": "userMessage",
              "value": "={{ $json.body.Body }}",
              "type": "string"
            },
            {
              "id": "736cb270-e996-43cc-b84e-b637ef0cf6bb",
              "name": "homensPhone",
              "value": "={{ $json.body.To.replaceAll(\"whatsapp:\",\"\") }}",
              "type": "string"
            },
            {
              "id": "9553dfcc-0390-45f9-b54e-c890ae3f7069",
              "name": "userPhone",
              "value": "={{ $json.body.From.replaceAll(\"whatsapp:\",\"\") }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -272,
        160
      ],
      "id": "a446df23-489a-4e7a-af1e-158098b1cea7",
      "name": "Edit Fields"
    }
  ],
  "pinData": {
    "Webhook: Twilio Inbound": [
      {
        "json": {
          "headers": {
            "host": "iothec.app.n8n.cloud",
            "user-agent": "TwilioProxy/1.1",
            "content-length": "562",
            "accept": "*/*",
            "accept-encoding": "gzip, br",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "54.242.71.114",
            "cf-ew-via": "15",
            "cf-ipcountry": "US",
            "cf-ray": "9741dcc9b3212440-IAD",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/x-www-form-urlencoded",
            "i-twilio-idempotency-token": "1bada0c7-dc83-429c-8771-992a66bd908e",
            "x-forwarded-for": "54.242.71.114, 104.23.211.208",
            "x-forwarded-host": "iothec.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-40-669b86c79-vv48h",
            "x-home-region": "us1",
            "x-is-trusted": "yes",
            "x-real-ip": "54.242.71.114",
            "x-twilio-signature": "kBQv+61LT5EzmHnyqYcW6DR9hYk="
          },
          "params": {},
          "query": {},
          "body": {
            "SmsMessageSid": "SM65802c607eedbca3599426fc3aff3748",
            "NumMedia": "0",
            "ProfileName": "Sebastian",
            "MessageType": "text",
            "SmsSid": "SM65802c607eedbca3599426fc3aff3748",
            "WaId": "570000000000",
            "SmsStatus": "received",
            "Body": "Medellin",
            "To": "whatsapp:+14155238886",
            "NumSegments": "1",
            "ReferralNumMedia": "0",
            "MessageSid": "SM65802c607eedbca3599426fc3aff3748",
            "AccountSid": "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
            "ChannelMetadata": "{\"type\":\"whatsapp\",\"data\":{\"context\":{\"ProfileName\":\"Sebastian\",\"WaId\":\"570000000000\"}}}",
            "From": "whatsapp:+570000000000",
            "ApiVersion": "2010-04-01"
          },
          "webhookUrl": "https://iothec.app.n8n.cloud/webhook/twilio-whatsapp",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook: Twilio Inbound": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send an SMS/MMS/WhatsApp message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_professional": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "create_professional": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "update_professional": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2bb5359a-e5eb-4317-8990-caea7e27c48f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1013a5049e044edbfd01c98148e986eb21bea8837b764809949b2ca4ad8b3f57"
  },
  "id": "IULVOB4NifM9GJtx",
  "tags": []
}