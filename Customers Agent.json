{
  "name": "Customers Agent",
  "nodes": [
    {
      "parameters": {
        "content": "# client\n\n\t•\tRecordatorio de cita\nComo cliente quiero recibir mensajes de recordatorio básicos antes de la cita para no olvidarla.\n\t•\tConfirmación de cita\nComo cliente quiero recibir confirmación de mi cita para tener seguridad de que fue agendada.\n\t•\tAgendar cita\nComo cliente quiero agendar una cita en un horario disponible para que quede reservada automáticamente.\n\t•\tConsultar horarios disponibles\nComo cliente quiero ver los horarios disponibles de un barbero en un día específico para escoger la mejor hora.\n\t•\tConsultar días disponibles\nComo cliente quiero consultar qué días tiene disponibilidad un barbero para planear mi cita.\n\t•\tBuscar barbero\nComo cliente quiero buscar barberos por nombre, barbería o ubicación para encontrar el que más me convenga.\n\t•\tRegistro cliente\nComo cliente quiero registrarme con mi nombre, correo y ciudad para poder usar la plataforma.",
        "height": 400,
        "width": 816
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -176,
        -400
      ],
      "typeVersion": 1,
      "id": "303013d2-34c8-416d-8bbc-9782816adb48",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "tableId": "Customer",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "phoneNumber",
              "fieldValue": "={{ $('final_message_text').item.json.phone }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $fromAI('name', '', 'string') }}"
            },
            {
              "fieldId": "email",
              "fieldValue": "={{ $fromAI('email', '', 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        848,
        256
      ],
      "id": "66651e71-bce6-4f39-8b2b-f5ca5c1ebda4",
      "name": "create_customer",
      "credentials": {
        "supabaseApi": {
          "id": "ujCg28xuhCRpQs12",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "Customer",
        "filters": {
          "conditions": [
            {
              "keyName": "phoneNumber",
              "keyValue": "={{ $('final_message_text').item.json.phone }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        976,
        256
      ],
      "id": "bf9ec1eb-d098-4a35-86b1-13d41cdc5cf6",
      "name": "get_customer",
      "notesInFlow": false,
      "credentials": {
        "supabaseApi": {
          "id": "ujCg28xuhCRpQs12",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "Customer",
        "filters": {
          "conditions": [
            {
              "keyName": "phoneNumber",
              "condition": "eq",
              "keyValue": "={{ $('final_message_text').item.json.phone }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "city",
              "fieldValue": "={{ $fromAI('city', '', 'string') }}"
            },
            {
              "fieldId": "neighborhood",
              "fieldValue": "={{ $fromAI('neighborhood', '', 'string') }}"
            },
            {
              "fieldId": "address",
              "fieldValue": "={{ $fromAI('address', '', 'string') }}"
            },
            {
              "fieldId": "metadata",
              "fieldValue": "={{ $fromAI('metadata', ``, 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        1104,
        256
      ],
      "id": "d91be5e1-a344-4016-afc9-166d04f3523b",
      "name": "update_customer",
      "credentials": {
        "supabaseApi": {
          "id": "ujCg28xuhCRpQs12",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a66421bd-22a4-4e4b-ac30-e249a1dbf190",
                    "leftValue": "={{ $json.messageType }}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "messageText"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "04170579-1d2f-4ff7-af5d-b70101fd1e9e",
                    "leftValue": "={{ $json.messageType }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "messageAudio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.messageType }}",
                    "rightValue": "location",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "7e897864-0cc1-4020-b1b5-fd3763557da0"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "location"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        144,
        16
      ],
      "id": "14efb1b0-52dc-46a1-a0b2-dacd2b2aa3fb",
      "name": "router_message"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "25ef902e-5034-42de-af8d-2d441efc77ec",
              "name": "phone",
              "value": "={{ $json.phone }}",
              "type": "string"
            },
            {
              "id": "3e097734-2591-43df-8fa9-6825851b6310",
              "name": "nameProfile",
              "value": "={{ $json.nameProfile }}",
              "type": "string"
            },
            {
              "id": "84d6f32c-0e87-4323-a06a-95ddc8346d8a",
              "name": "finalMessage",
              "value": "={{ $json.messageText }}",
              "type": "string"
            },
            {
              "id": "628779cf-6271-4179-9c25-dfff3c457083",
              "name": "phoneTo",
              "value": "={{ $json.phoneTo }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        368,
        32
      ],
      "id": "7a70295d-fe00-4d7a-bb81-2ed8b69f6f6a",
      "name": "final_message_text"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Eres un asistente llamado BARBER que interpreta mensajes recibidos por WhatsApp para gestionar citas en la barbería. Tu misión principal es registrar al cliente si es la primera vez que se comunica y luego agendar su cita.\n\nHoy es {{ $now }}. Zona horaria: America/Bogota (UTC-5)\n\n\nTu trabajo es entender lo que el usuario necesita y actuar en consecuencia, usando las herramientas disponibles. Solo gestionas el registro de clientes y citas. No respondes preguntas generales.\n\nHerramientas y Lógica de Registro:\nTu primera tarea, antes de cualquier agendamiento, es identificar al cliente. Para esto, cuentas con las siguientes herramientas:\n- `get_customer(phone_number: str, email: str)`: Permite buscar un cliente por su número de teléfono o correo electrónico.\n- `create_customer(name: str, phone_number: str, email: str)`: Registra un nuevo cliente en la base de datos.\n- `update_customer(phone_number: str, name: str, email: str)`: Actualiza los datos de un cliente existente.\n\nlos datos del cliente los debes guardar en los sigueintes campos:\n- name: nombre del cliente\n- phone_number: número de teléfono del cliente\n- email: correo electrónico del cliente\n- city: ciudad del cliente\n- neighborhood: barrio del cliente\n- address: dirección del cliente\n- metadata: datos adicionales del cliente, como el nombre del barbero favorito, el tipo de cabello, el color del cabello, el pelo largo o corto, etc. esta informacion se debe guardar en formato json\n\nMapea los datos en un json y luego envialos a la herramienta `create_customer` o `update_customer` asignandolos desde el json generado a los campos correspondientes en la base de datos\nlos datos los debes guardar en los campos correspondientes, si en dado caso no los tienes dejalos vacios o como null\n\nLógica de flujo de conversación:\n1.Verificación inicial: Cuando un usuario se comunica, usa la herramienta `get_customer` con el número de teléfono del que proviene el mensaje para verificar si ya está registrado.\n2.Cliente existente: Si el cliente ya está en la base de datos, salúdalo por su nombre, por ejemplo: \"¡Hola, [Nombre del cliente]! ¿Cómo puedo ayudarte hoy? ¿Te gustaría agendar una cita?\". Luego, procede con las tareas de gestión de citas.\n3.Cliente nuevo: Si el cliente no está en la base de datos, salúdalo y solicita su nombre y correo electrónico para poder registrarlo. Sé claro y conciso. Por ejemplo: \"¡Hola! Para poder ayudarte, necesito que me des tu nombre completo y tu correo electrónico.\"\n4.Recopilación de datos: Si el cliente envía los datos en mensajes separados, espera a tener tanto el nombre como el correo electrónico antes de actuar.\n5.Validación de correo: Una vez que tengas los datos, antes de registrar, usa `get_customer` con el correo electrónico proporcionado para verificar si ya existe en el sistema. Si ya existe, informa al cliente y pide que aclare o proporcione un correo diferente.\n6.Registro: Si el correo no está registrado, usa `create_customer` con el nombre, correo y el número de teléfono que ya tienes. Confirma el registro al cliente, por ejemplo: \"¡Excelente, [Nombre del cliente]! Tu registro ha sido completado con éxito.\"\n\nTareas de gestión de citas (una vez el cliente está registrado):\n- crear_evento: cuando el usuario quiere agendar una cita nueva\n- reprogramar_evento: cuando quiere cambiar la fecha o la hora de una cita existente\n- eliminar_evento: cuando quiere cancelar una cita existente\n- consultar_evento: cuando quiere saber cuándo tiene una cita\n\nTarea de buscar barberos (Cuando el cliente quiera consultar un barbero o un listado de barberos)\n- find_barber: cuando el usuario solicite buscar un barbero u obtener un listado de barberos\n\nEjemplos de mensajes y sus intenciones (después del registro):\n- “Agenda una cita con el barbero Juan mañana a las 4” = crear_evento\n- “Pasemos la cita del lunes para el miércoles” = reprogramar_evento\n- “Cancela la cita de hoy” = eliminar_evento\n- “¿Qué tengo esta semana?” = consultar_evento\n\nTu respuesta debe ser en lenguaje natural, clara y breve, como si estuvieras escribiendo por WhatsApp. Usa emojis si es apropiado.\n\nExtrae toda la información posible del mensaje: título, fecha, hora, duración y ubicación. Si algún dato importante no está claro (por ejemplo, la hora), pregúntalo de forma amable antes de ejecutar la acción.\n\nEjemplos de respuesta:\n- Registro exitoso: “¡Perfecto, ya te registré! Ahora, ¿qué día y a qué hora te gustaría agendar tu cita? 💇‍♂️”\n- Evento creado: “Listo, agendé tu cita ‘Corte de cabello’ para mañana a las 4:00 p.m. con el barbero Juan. 😊”\n- Evento reprogramado: “He actualizado tu cita. Ahora es el miércoles a las 3:00 p.m.”\n- Evento eliminado: “He cancelado tu cita. Si necesitas otra, dime. 👍”\n- Consulta: “Tienes una cita ‘Corte de cabello’ el viernes a las 10:00 a.m.”\n\nSi el mensaje es ambiguo o no se entiende qué desea el usuario, pídele amablemente que aclare su intención.\n\nNo devuelvas estructuras técnicas ni generes JSON. Tu única salida debe ser una respuesta conversacional humana.\n\nPuedes usar la memoria de los últimos 10 mensajes del usuario para mantener el contexto si es necesario.\n\nTen en cuenta estas expresiones comunes de fecha y su interpretación:\n- “mañana a las 10am” = día siguiente a la fecha actual, a las 10:00 a.m.\n- “el próximo lunes” = el lunes siguiente a la fecha actual\n- “dentro de 8 días” = ocho días después de la fecha actual\n- “el mes que viene” = el mismo día del mes siguiente\n- “este viernes por la tarde” = si el viernes ya pasó esta semana, se refiere al próximo viernes\n\nSi no se menciona una duración específica para la cita, asume que es de una hora.\n\nCuando uses una herramienta, asegúrate de proporcionar correctamente estos datos si están disponibles en el mensaje del usuario:\n- Título del evento = summary\n- Fecha y hora de inicio = startTime (formato ISO 8601)\n- Fecha y hora de finalización = endTime (puede calcularse si hay duración)\n- Descripción = description (opcional)\n- Ubicación = location (opcional)\n\nNo incluyas enlaces de videollamadas (como Google Meet) en tus respuestas, aunque la herramienta los devuelva.\n\nDatos del cliente\n\nNúmero de teléfono del cliente: {{ $json.phone }}\nmensaje del cliente: {{ $json.finalMessage }}. de aquí busca y mapea los datos del cliente conforme te lo indique anteriormente",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        784,
        32
      ],
      "id": "fba998a8-4fcd-47de-87e8-8bb4e16416bc",
      "name": "agent_crud_customer",
      "executeOnce": false
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        560,
        256
      ],
      "id": "85d91be0-c842-4824-ae75-b5cf7e5fbedb",
      "name": "open_router_chat_model",
      "credentials": {
        "openRouterApi": {
          "id": "R7LaWQCbzgw5kv4b",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.phone }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        720,
        256
      ],
      "id": "d09a066e-47fd-411b-b286-c205812bdbc3",
      "name": "memory_model"
    },
    {
      "parameters": {
        "updates": [
          "messages"
        ],
        "options": {}
      },
      "type": "n8n-nodes-base.whatsAppTrigger",
      "typeVersion": 1,
      "position": [
        -272,
        368
      ],
      "id": "d0251bdd-473c-4af5-9348-9ba153d8fcd6",
      "name": "WhatsApp Trigger",
      "webhookId": "1e1217ef-6df5-42d8-8d71-e2980d89257d",
      "credentials": {
        "whatsAppTriggerApi": {
          "id": "GOpQ9RJmQn8tVPVI",
          "name": "WhatsApp_OAuth_account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "780cbb3a-30f5-4b0d-a4cd-2558983a9e97",
              "name": "phone",
              "value": "=+{{ $json.contacts[0].wa_id }}",
              "type": "string"
            },
            {
              "id": "4864dd2f-b5ae-4d99-9e21-100ade285167",
              "name": "nameProfile",
              "value": "={{ $json.contacts[0].profile.name }}",
              "type": "string"
            },
            {
              "id": "3649510c-3698-4edc-b0ab-09244455fba2",
              "name": "messageType",
              "value": "={{ $json.messages[0].type }}",
              "type": "string"
            },
            {
              "id": "f337e671-ab3e-4b4a-aa8a-21feb0bdf372",
              "name": "messageText",
              "value": "={{ $json.messages[0].text.body }}",
              "type": "string"
            },
            {
              "id": "de27995e-400d-4a09-b556-6065fb2629a3",
              "name": "phoneTo",
              "value": "=+{{ $json.metadata.display_phone_number }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -64,
        368
      ],
      "id": "370c3b41-0526-4e2c-a9d6-1a79a94f394b",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "769562042908156",
        "recipientPhoneNumber": "={{ $('final_message_text').item.json.phone }}",
        "textBody": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        1440,
        256
      ],
      "id": "c27d419c-06dd-4a2d-a967-ef6741a35b40",
      "name": "Send message",
      "webhookId": "7865c1ca-9da9-4370-871c-e17991de578d",
      "credentials": {
        "whatsAppApi": {
          "id": "CQAhOCKfKHUAqzKP",
          "name": "WhatsApp account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Usa esta herramienta cuando el usuario quiera crear una nueva cita",
        "calendar": {
          "__rl": true,
          "value": "iotecnologyco@gmail.com",
          "mode": "list",
          "cachedResultName": "iotecnologyco@gmail.com"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "additionalFields": {
          "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}",
          "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        816,
        576
      ],
      "id": "4650c669-8a1a-418e-ad20-5e6ad2f1be7c",
      "name": "crear_evento",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "fHawnZxOU1rXLKn2",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Usa esta herramienta cuando el usuario quiera mover una cita a otro día o a otra hora",
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "iotecnologyco@gmail.com",
          "mode": "list",
          "cachedResultName": "iotecnologyco@gmail.com"
        },
        "eventId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Event_ID', ``, 'string') }}",
        "updateFields": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        960,
        576
      ],
      "id": "b4a9f30c-6d92-428e-a83a-2a2d9a06d6b3",
      "name": "reprogramar_evento",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "fHawnZxOU1rXLKn2",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "usa esta herramienta cuando el usuario quiera eliminar un evento",
        "operation": "delete",
        "calendar": {
          "__rl": true,
          "value": "iotecnologyco@gmail.com",
          "mode": "list",
          "cachedResultName": "iotecnologyco@gmail.com"
        },
        "eventId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Event_ID', ``, 'string') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        1120,
        576
      ],
      "id": "4d842740-d886-4e20-9813-b56ff79f080b",
      "name": "eliminar_evento",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "fHawnZxOU1rXLKn2",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "usa esta herramienta cuando el usuario quiera saver cuando tiene una cita",
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "iotecnologyco@gmail.com",
          "mode": "list",
          "cachedResultName": "iotecnologyco@gmail.com"
        },
        "limit": 10,
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        1248,
        576
      ],
      "id": "a6021f3b-cc70-4187-8646-f86ce4cde03f",
      "name": "consultar_evento",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "fHawnZxOU1rXLKn2",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "usa esta herramienta cuando el usuario quiera buscar un barbero u obtener una lista de barberos registrados",
        "operation": "getAll",
        "tableId": "Professional",
        "limit": 8
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        1360,
        480
      ],
      "id": "41a5dfdf-2dc5-45c8-ad05-098f0a763a24",
      "name": "find_barber",
      "credentials": {
        "supabaseApi": {
          "id": "ujCg28xuhCRpQs12",
          "name": "Supabase account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "create_customer": {
      "ai_tool": [
        [
          {
            "node": "agent_crud_customer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_customer": {
      "ai_tool": [
        [
          {
            "node": "agent_crud_customer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "update_customer": {
      "ai_tool": [
        [
          {
            "node": "agent_crud_customer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "router_message": {
      "main": [
        [
          {
            "node": "final_message_text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "final_message_text": {
      "main": [
        [
          {
            "node": "agent_crud_customer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "agent_crud_customer": {
      "main": [
        [
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "open_router_chat_model": {
      "ai_languageModel": [
        [
          {
            "node": "agent_crud_customer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "memory_model": {
      "ai_memory": [
        [
          {
            "node": "agent_crud_customer",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "WhatsApp Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "router_message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "crear_evento": {
      "ai_tool": [
        [
          {
            "node": "agent_crud_customer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "reprogramar_evento": {
      "ai_tool": [
        [
          {
            "node": "agent_crud_customer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "eliminar_evento": {
      "ai_tool": [
        [
          {
            "node": "agent_crud_customer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "consultar_evento": {
      "ai_tool": [
        [
          {
            "node": "agent_crud_customer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "find_barber": {
      "ai_tool": [
        [
          {
            "node": "agent_crud_customer",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "09de00be-2ae3-4c76-b073-216236aec77c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1013a5049e044edbfd01c98148e986eb21bea8837b764809949b2ca4ad8b3f57"
  },
  "id": "p1SQkexe5OpO0PH5",
  "tags": []
}